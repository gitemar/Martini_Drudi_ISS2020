/* Generated by AN DISI Unibo */ 
package it.unibo.timer

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Timer ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				var Teatable : Int = -1
				var RemainingTime : Long = -1
				var Record : Long = -1
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						discardMessages = false
					}
					 transition( edgeName="goto",targetState="waitingForCommand", cond=doswitch() )
				}	 
				state("waitingForCommand") { //this:State
					action { //it:State
						println("timer | waiting for waiter's command...")
					}
					 transition(edgeName="t05",targetState="startTimer",cond=whenDispatch("startTimer"))
				}	 
				state("startTimer") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("startTimer(TEATABLE_ID,MAX_TIME)"), Term.createTerm("startTimer(TEATABLE_ID,MAX_TIME)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("timer | starting timer for teatable ${payloadArg(0)} and timeout ${payloadArg(1)} ms")
								
												Teatable = payloadArg(0).toInt()
												RemainingTime = payloadArg(1).toLong()
								Record = getCurrentTime()
						}
						stateTimer = TimerActor("timer_startTimer", 
							scope, context!!, "local_tout_timer_startTimer", RemainingTime )
					}
					 transition(edgeName="t06",targetState="handleTimeout",cond=whenTimeout("local_tout_timer_startTimer"))   
					transition(edgeName="t07",targetState="stopTimer",cond=whenDispatch("stopTimer"))
					transition(edgeName="t08",targetState="endTimer",cond=whenDispatch("endTimer"))
				}	 
				state("stopTimer") { //this:State
					action { //it:State
						println("timer | stopping timer...")
						 var previousInstant = Record 
						Record = getCurrentTime()
						 RemainingTime = RemainingTime - (Record - previousInstant)  
					}
					 transition(edgeName="t09",targetState="resumeTimer",cond=whenDispatch("resumeTimer"))
				}	 
				state("resumeTimer") { //this:State
					action { //it:State
						println("timer | resuming timer...")
						Record = getCurrentTime()
						stateTimer = TimerActor("timer_resumeTimer", 
							scope, context!!, "local_tout_timer_resumeTimer", RemainingTime )
					}
					 transition(edgeName="t010",targetState="handleTimeout",cond=whenTimeout("local_tout_timer_resumeTimer"))   
					transition(edgeName="t011",targetState="endTimer",cond=whenDispatch("endTimer"))
				}	 
				state("handleTimeout") { //this:State
					action { //it:State
						println("timer | TIMEOUT! time expired for teatable $Teatable!")
						emit("timeout", "timeout($Teatable)" ) 
					}
					 transition( edgeName="goto",targetState="waitingForCommand", cond=doswitch() )
				}	 
				state("endTimer") { //this:State
					action { //it:State
						println("timer | removing timer...")
					}
					 transition( edgeName="goto",targetState="waitingForCommand", cond=doswitch() )
				}	 
			}
		}
}
