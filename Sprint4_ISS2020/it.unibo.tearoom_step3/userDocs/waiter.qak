System waiter

mqttBroker "localhost" : 1883 eventTopic "unibo/polar" 	//mqtt.eclipse.org

// Interaction Waiter - Mover =================================//
Request moveTo 	: moveTo(KEY_POSITION)						   //
Reply done 		: done(X,Y)									   //
Dispatch end 	: end(ARG)									   //	
//=============================================================//

// Interaction Mover - TrustingWalker =========================//
Event    twstarted  : twstarted(X)							   // emitted by TrustingWalker after it started
Request  movetoCell : movetoCell(X,Y)						   // move to position (X,Y) with X column and Y row
Reply    atcell     : atcell(X,Y)							   // if success TrustingWalker send this message
Reply	 walkbreak  : walkbreak(X,Y) 						   // if fail TrustingWalker send this message
// ============================================================//

// Interaction Waiter - Mastertimer ===========================//
Dispatch startTimer 	: startTimer(TEATABLE_ID, MAX_TIME)	   //
Dispatch stopTimer 		: stopTimer(TEATABLE_ID)			   //
Dispatch resumeTimer 	: resumeTimer(TEATABLE_ID)			   //
Dispatch endTimer 		: endTimer(TEATABLE_ID)				   //
Dispatch timeout 		: timeout(TEATABLE_ID)				   //
//=============================================================//

// Interaction MasterTimer - SubTimers =========================//
Dispatch startSubtimer 		: startSubtimer(MAX_TIME)	   				//
Dispatch stopSubtimer 		: stopSubtimer(ARG)			  			//
Dispatch resumeSubtimer 	: resumeSubtimer(ARG)			   			//
Dispatch endSubtimer 		: endSubtimer(ARG)				   			//
Dispatch timeoutSubtimer 	: timeoutSubtimer(TEATABLE_ID)				    //
//==============================================================//

// Interaction Waiter - Tearoom ========================================//
Request getRoomState : getRoomState(REQUEST, ARG1)						//
Reply state			 : state(STATE)
Reply numBusyAndDirty : numBusyAndDirty(BUSY,DIRTY)										//
Dispatch updateState : updateState (UPDATE_REQUEST, ARG1, ARG2, ARG3)	//
//======================================================================//

// Interaction Waiter - Smartbell ============================//
Dispatch enter : enter(CLIENT_ID)						      //
//============================================================//

// Interaction Waiter - Client ===============================//
Event wait 				: wait(CLIENT_ID, MAX_TIME)			  //
Event sitPlease 		: sitPlease(CLIENT_ID, TEATABLE_ID)   //
Dispatch wantToOrder		: wantToOrder(TEATABLE_ID)	          //
Event orderPlease		: orderPlease(TABLE)
Dispatch tea			: tea(TEATABLE_ID,TEA)				  //
Event teaServed 		: teaServed(TEATABLE_ID, TEA)		  //
Dispatch billPlease 		: billPlease(TABLE_ID)				  //
Event cardPlease 		: cardPlease(TABLE)					  //
Event maxTimeExceeded 	: maxTimeExceeded(TEATABLE_ID)		  //
Event exitPlease 		: exitPlease(CLIENT_ID)				  //
//============================================================//

// Interaction Waiter - Barman  ==============================//
Dispatch order : order(TEATABLE_ID, TEA)					  //
Dispatch ready : ready(TEATABLE_ID,TEA)						  //
//============================================================//

// Interaction Waiter auto-message ===========================//
Dispatch cleanTable : cleanTable (TEATABLE_ID)				  //
//============================================================//

Context ctxwaiter 		 	ip [host="127.0.0.1" port=8029]
Context ctxtearoom 		 	ip [host="localhost" port=8015]

ExternalQActor tearoom 		context ctxtearoom
ExternalQActor barman		context ctxtearoom
ExternalQActor smartbell	context ctxtearoom

CodedQActor datacleaner    	context ctxwaiter className "rx.dataCleaner"
CodedQActor distancefilter 	context ctxwaiter className "rx.distanceFilter"
CodedQActor basicrobot 		context ctxwaiter className "it.unibo.basicrobot.Basicrobot"
CodedQActor trustingwalker 	context ctxwaiter className "it.unibo.trustingwalker.Trustingwalker"

QActor mover context ctxwaiter {  
[#
	var X = 0
	var Y = 0
	var correct = true
	var CurrentPlannedMove = ""
	var StepTime    	   = 450L
	val BackTime           = 2 * StepTime / 3
	//var obstacleFound      = false  
	val inmapname          = "teaRoomExplored" 
	
#]
	State s0 initial {	
		//initializing Planner (also used by trustingWalker)
 		run itunibo.planner.plannerUtil.initAI()
		run itunibo.planner.plannerUtil.loadRoomMap( inmapname ) 		
		run itunibo.planner.plannerUtil.showCurrentRobotState()

		//read key-position from prolog file
		solve(consult("positions.pl"))
		
	}
	//waiting for TrustingWalker to be created
	Transition t0 whenEvent twstarted -> waitingForCommand
	
	State waitingForCommand {
		println("mover | waiting for waiter's commands...")
		updateResource [# "${itunibo.planner.plannerUtil.get_curPos().first},${itunibo.planner.plannerUtil.get_curPos().second}" #]
		[# correct = false #]
		
	}
	Transition t1 	whenRequest moveTo -> move
					whenMsg end -> end
	
	State move{
		onMsg(moveTo : moveTo(P)){
			[# var Pos = payloadArg(0) #]
			solve(pos($Pos, X, Y))	
			ifSolved { 
					[# 
						X = getCurSol("X").toString().toInt() 
						Y = getCurSol("Y").toString().toInt()
						correct = true	
					#]
			}
			if [# correct == true #]{
				println("mover | correct request: [${payloadArg(0)}] correspond to ($X,$Y)")
				request trustingwalker -m movetoCell : movetoCell($X,$Y)
			}
			else{
				println("mover | ERROR: required position doesn't exist")
				printCurrentMessage
			}
		}
	}
	Goto waitingForReply if [# correct == true #] else unexpected
	
 	State waitingForReply {
 	 	println("mover | waiting for reply...")
 	 }
 	 Transition t2 	whenReply atcell ->  success
					whenReply walkbreak -> unexpected
				
	State success {
		replyTo moveTo with done : done($X, $Y)
		onMsg(atcell : atcell(X,Y)){
			println("Mover replying to waiter...")
		}
		// se la direzione che stai guardando non è verso il basso (e.g servo i clienti guardando il tavolo :-))
		// allora cambia direzione di conseguenza per guardare verso il basso. OCCHIO dovresti aggiornare anche lo stato del robot
		// per indicare che stai guardando in una diversa direzione.. peccato che sia tutto cablato nel Planner che tu ovviamente non
		//vuoi toccare!
		// Quindi la soluzione è memorizzare la direzione che stai guardando. Poi cambiarla per guardare in basso E prima di invocare 
		// il planner cambiare nuovamente direzione per far sì di tornare a guardare la direzione che il Planner si aspetta :-)
	}
	Goto waitingForCommand		
				
 	State unexpected{
 		println("There is something wrong ...")
		printCurrentMessage
		[# var F = -1 #]
		replyTo moveTo with done : done($F,$F)
	}
    Goto waitingForCommand
    
    State end {
    	println("mover | terminating...")
    	terminate 1
    }
    
 }

// MASTERTIMER COMMENTED TO EASILY TEST THE WAITER
/*
 * UPGRADE VERSION: may be interesting to specified the number of SubTimer needed with an additional State and initMasterTimer(NUM_SUBTIMER) message!
 *	--> possible upgrade when we refactor code!
 *
 * simultaneously sent timeout and endtimer: this case is rare but it can happen. Since actor process message one at a time and in order this simultaneous case
 * is equivalent to two different cases:
 *  1) MasterTimer receive first an endTimer and then a timeout for that timer
 *  2) MasterTimer receive first a timeout then a endTimer
 *
 * CASE 1:
 *	MasterTimer handle normally the endTimer event. Mastertimer don't know that a timeout was sent for the same teatable since this event is still inside the queue.
 * To manage this case correctly MasterTimer must ignore the timeout message and not forward it to the Waiter since Waiter already sent an endTimer so it's not interest in
 * this message (to do so we need to remember the recently ended timer (isEnded(Teatable) = false/true) and we can forget these infos when we re-start a subtimer).
 * SubTimer must ignore the endTimer he received since time was expired (realized by discardMessage on).
 *
 * CASE 2:
 * MasterTimer handle normally the timeout event. Mastertimer don't know that a endTimer was sent for the same teatable since this message is still inside the queue so the Waiter
 * MUST remember that he already sent a EndTimer so he MUST not handle this timeout event! Tiemout must be considered from the next re-start timer (startTimer sent). The Mastertimer
 * must ignore the endTimer message since the Subtimer already timed out (even if the MasterTimer sent EndTimer to Subtimer nothing will happen since SubTimer have discardMessage on).
 *
 * This consideration must be applied also to the case of simultaneus stopTimer/timeout
 * Also this simultaneus case must be handled in waiter for timeout / billPlease simultaneus sent
 */
QActor mastertimer context ctxwaiter {
	
	[#
		val map = mutableMapOf<Int, ActorBasic?>()
		var Teatable : Int
		
		val endedTimers = mutableMapOf<Int, Boolean?>()
	#]
	
	State s0 initial {
		discardMsg Off
		
		[#
			//map init: create timer to be immediately ready when Waiter want to use timers
			map.put(1, Subtimer("subtimer1", scope, context!!, 1))
			map.put(2, Subtimer("subtimer2", scope, context!!, 2))

			endedTimers.put(1, false)
			endedTimers.put(2, false)
			
			// waiting for subtimer to be created
			delay(1000)
		#]
	}
	Goto waitForCommand
	
	State waitForCommand{
		println("mastertimer | waiting for waiter's command...")
	}
	Transition t0 	whenMsg startTimer -> startTimer
					whenMsg stopTimer -> stopTimer
					whenMsg resumeTimer -> resumeTimer
					whenMsg endTimer -> endTimer
					whenMsg timeoutSubtimer -> handleTimeout
	
	State startTimer {
		onMsg(startTimer : startTimer(TABLE, TIME)){
			println("mastertimer | starting timer for teatable ${payloadArg(0)} and timeout ${payloadArg(1)} ms")
		    [#
		    	Teatable = payloadArg(0).toInt()
		    	endedTimers.put(Teatable, false)  //forget past end for simulaneus timeout/endTimer message handling
		    	forward("startSubtimer", "startSubtimer(${payloadArg(1)})" ,"${map.get(Teatable)!!.name}" )
		    #]

		}
		
	}
	Goto waitForCommand
	
	State stopTimer {
		onMsg(stopTimer : stopTimer(TABLE)) {
			
			 println("mastertimer | stopping timer for teatable ${payloadArg(0)}...")
			 [# Teatable = payloadArg(0).toInt()#]
			
			if [# endedTimers.get(Teatable)!! == true #] { //warning: simultaneously received stopTimer and timeout
					println("mastertimer | [stopTimer] ignoring message already handled...")
					//ignore message
			}
			else{
					println("mastertimer | stopping timer for teatable ${payloadArg(0)}...")
					[# forward("stopSubtimer", "stopSubtimer(arg)" ,"${map.get(Teatable)!!.name}" ) #]
					
			}

		}
	}
	Goto waitForCommand
	
	State resumeTimer {
		onMsg(resumeTimer : resumeTimer(TABLE)) {
			
			 println("mastertimer | resuming timer for teatable ${payloadArg(0)}...")
			 [#
		    	Teatable = payloadArg(0).toInt()
		    	forward("resumeSubtimer", "resumeSubtimer(arg)" ,"${map.get(Teatable)!!.name}" )
		    #]

		}
	}
	Goto waitForCommand
	
	State endTimer {
		onMsg(endTimer : endTimer(TABLE)) {
			
			 println("mastertimer | ending timer for teatable ${payloadArg(0)}...")
			  [# Teatable = payloadArg(0).toInt()#]
			
			if [# endedTimers.get(Teatable)!! == true #] { //warning: simultaneously received endTimer and timeout
					println("mastertimer | [endTimer] ignoring message already handled...")
					//ignore message
			}
			else{
					println("mastertimer | ending timer for teatable ${payloadArg(0)}...")
					[# forward("endSubtimer", "endSubtimer(arg)" ,"${map.get(Teatable)!!.name}" ) #]
					[# endedTimers.put(Teatable, true) #] //remember past end for simultaneous timeout/endTimer message handling 
			}

		}
	}
	Goto waitForCommand
	
	State handleTimeout {
		onMsg(timeoutSubtimer : timeoutSubtimer(TABLE)){
			[# Teatable = payloadArg(0).toInt()#]
			
			if [# endedTimers.get(Teatable)!! == true #] { //warning: simultaneously received endTimer/stopTimer and timeout
					println("mastertimer | [timeoutSubtimer] ignoring message already handled...")
					//ignore message
			}
			else{
				println("mastertimer | timeout for teatable $Teatable...")
				forward waiter -m timeout : timeout($Teatable)
				[#	endedTimers.put(Teatable, true) #] //remember past end for simultaneous timeout/endTimer/stopTimer message handling 
			}
		} 
	}
	Goto waitForCommand
}


/**********************************************************
 *******************  WAITER ACTOR ************************
 **********************************************************/

QActor waiter context ctxwaiter {
	
	[# 
		var MaxWaitTime = 0L
		val MaxStayTime = 20000L   	// 1min
		val IdleTime = 200L	
		val MaxCleanTime = 5000L			// 200 ms
		
		var ClientToConvoy = ""
		var DestTable = -1
		var CurDrink = ""
		var Price = 3
		
		var TimeToClean = MaxCleanTime
		var TimeCleanBegan = 0L
		var WasCleaning = false
		var TableToClean = 0
		
		val stopHandlingClientAtTable = mutableMapOf<Int, Boolean?>()
		var stopCheck = false
	#]
	
	
	State s0 initial {
		
		//init
		println("waiter | beep beep boop...START...")
		[# stopHandlingClientAtTable.put(1, false) #]
		[# stopHandlingClientAtTable.put(2, false) #]
		discardMsg Off
	}
	Goto restingAtHome
	
	// WAITER WAIT FOR TASK TO DO 1
	State restingAtHome {
			
		println("waiter | Chilling out at home...")	
		updateResource[#"atPosition(0,0,home)"#]
		
	}
	Transition t0 	whenMsg enter -> handleEnterPhase1
					whenMsg wantToOrder -> handleOrderFromClientPhase0
					whenMsg ready -> serveTeaToClientPhase0
					whenMsg timeout -> handleTimeoutPhase0
					whenMsg billPlease -> handlePaymentPhase0 
					whenMsg cleanTable -> cleanTeatablePhase1
	
	// WAITER WAIT FOR TASK TO DO 2
	State doATask {
		
		println("waiter | checking if there is a task to do...")
		
	}
	Transition t0 	whenTimeVar IdleTime -> goHome				// if waiter has no task it go home to rest a little bit
					whenMsg enter -> handleEnterPhase1
					whenMsg wantToOrder -> handleOrderFromClientPhase0
					whenMsg ready -> serveTeaToClientPhase0
					whenMsg timeout -> handleTimeoutPhase0
					whenMsg billPlease -> handlePaymentPhase0 
					whenMsg cleanTable -> cleanTeatablePhase1
	
	// WAITER GO HOME
	State goHome {
		
		updateResource[#"goingHome"#]
		request mover -m moveTo : moveTo(home)
		
	}
	Transition t0 whenReply done -> restingAtHome
	
	/******************************  WAITER HANDLE ENTER REQUEST  ***************************************************************/
	State handleEnterPhase1 {
		println("waiter | enter message arrived")
		onMsg(enter : enter(CLIENT_ID)){
			if [# WasCleaning == true #]{
				[# var TempTime = 0L #]
				memoCurrentTime TempTime
				[# TimeToClean = TimeToClean - (TempTime - TimeCleanBegan) #]
				println("waiter | interrupted cleaning to handle enter request")
			}
			[#ClientToConvoy = payloadArg(0)#]
			println("waiter | a client with client_id ${payloadArg(0)} asked to enter the safe tearoom...")
			println("waiter | checking if the safe tearoom has a free table ...")
			request tearoom -m getRoomState : getRoomState(getFreeTable, arg1)
		} //onMsg
		
	}
	Transition t0 whenReply state -> handleEnterPhase2
	
	State handleEnterPhase2 {
		println("waiter | state response arrived")
		onMsg(state : state(S)){
			if [#payloadArg(0).toInt() == 0 #] { //NO free and clean table (CAN'T HAPPEN in this first prototype since there is only one client)
				[#MaxWaitTime = 1L#]
				println("waiter | But there is no free and clean teatable")
			}
			else { // there is a free and clean table and Tearoom sent me it's ID
				[# 
					MaxWaitTime =  0L
					DestTable = payloadArg(0).toInt()
				#]
			}
		}
		println("waiter | waittime: $MaxWaitTime")
	}
	Goto convoyClientToTablePhase1 if [# MaxWaitTime == 0L #] else requestTableStates
	
	State requestTableStates{
		println("waiter | requesting teatable states to tearoom...")
		request tearoom -m getRoomState : getRoomState(getBusyAndDirtyTables, arg1)
	}
	Transition t0 whenReply numBusyAndDirty -> analyzeTableStates
	
	State analyzeTableStates{
		onMsg(numBusyAndDirty : numBusyAndDirty(B,D)){
			println("waiter | tearoom replied with ${payloadArg(0)}-${payloadArg(1)} (busy-dirty)")
			[#
				val b=payloadArg(0).toInt()
				val d=payloadArg(1).toInt()
				var totTime = 0L
				if(d>0){
					totTime = MaxCleanTime
				}
				else{
					totTime = MaxStayTime
				}
				MaxWaitTime = totTime
			#]
			println("waiter | client has to wait at least $MaxWaitTime minutes")
			updateResource[#"newClient($ClientToConvoy):clientWaiting:$ClientToConvoy:$MaxWaitTime"#]
			delay 800
//			emit wait : wait($ClientToConvoy,$MaxWaitTime)
		}
	}
	Goto doATask if [# WasCleaning == false #] else checkForOtherPrioritizedTasks
	
	
	/****************************************************************************************************************************/
	
	/******************************  WAITER CONVOY CLIENT TO TABLE  *************************************************************/ 
	State convoyClientToTablePhase1 {
		updateResource[#"reachingPosition(entrance)"#]
		println("waiter | reaching entrance door to convoy client $ClientToConvoy to teatable $DestTable ...")
		request mover -m moveTo : moveTo(entrance)
	}
	Transition t0 whenReply done -> convoyClientToTablePhase2
	
	State convoyClientToTablePhase2 {
		onMsg(done : done(X,Y)){
			updateResource[#"atPosition(entrance,${payloadArg(0)},${payloadArg(1)}):clientEntering:$ClientToConvoy:$MaxWaitTime"#]
			delay 500
//			emit wait : wait($ClientToConvoy , $MaxWaitTime)
			updateResource[#"convoyingClientToTable($DestTable,$ClientToConvoy)"#]
			println("waiter | convoying client $ClientToConvoy to teatable $DestTable ...")
			[#var Dest =  "teatable" + DestTable.toString() #]
			request mover -m moveTo : moveTo($Dest)
		}
	}
	Transition t0 whenReply done -> convoyClientToTablePhase3
		
	State convoyClientToTablePhase3 {
		onMsg(done : done(X,Y)){
			println("waiter | Start mastertimer, update tearoom and telling client to sit")
			forward tearoom -m updateState : updateState (updateTableState, $DestTable, busy, $ClientToConvoy)
			updateResource[# "atPosition(teatable$DestTable,${payloadArg(0)},${payloadArg(1)}):clientSitting:$ClientToConvoy:$DestTable" #]
//			emit sitPlease : sitPlease($ClientToConvoy, $DestTable )
			//refresh information in stopHandlingClientAtTable to correctly handle case of simultaneous timeout/billPlease/wantToOrder
			[# stopHandlingClientAtTable.put(DestTable, false) #]
			//start timer to count until MaxStayTime
			delay 500
			forward mastertimer -m startTimer : startTimer($DestTable, $MaxStayTime)
		}
		
	}
	Goto doATask if [# WasCleaning == false #] else checkForOtherPrioritizedTasks
	
/****************************************************************************************************************************/

/******************************  WAITER CLEAN TABLE  ************************************************************************/
	State cleanTeatablePhase1 {
		
		[# var Dest="" #]
		
		onMsg(cleanTable : cleanTable(T)) {
			println("Waiter moving towards teatable to clean (${payloadArg(0)})")
			[#
			  Dest =  "teatable" + payloadArg(0) 
			  DestTable = payloadArg(0).toInt()
			  TableToClean = payloadArg(0).toInt()
			#]
		}
		
		//resuming cleaning if waiter was cleaning
		if[# WasCleaning == true #]{
			println("Waiter moving towards teable $TableToClean to resume cleaning")
			[#
			  Dest =  "teatable" + TableToClean
			  DestTable = TableToClean
			#]
		}
		
		updateResource[#"cleaning($DestTable)"#]
		//first we reach the table
		request mover -m moveTo : moveTo($Dest)
	}
	Transition t0 whenReply done -> cleanTeatablePhase2
	
	
	State cleanTeatablePhase2 {
		
		// then we clean the teatable
		println("waiter | cleaning teatable $TableToClean")
		[#
			WasCleaning = true
		#]	
		memoCurrentTime TimeCleanBegan
	}
	Transition t1 whenTimeVar TimeToClean -> finishedClean
				  whenMsg ready -> serveTeaToClientPhase0
				  whenMsg enter -> handleEnterPhase1
				  whenMsg wantToOrder -> handleOrderFromClientPhase0
				  whenMsg billPlease -> handlePaymentPhase0
				  
	State finishedClean{
		
		println("waiter | finished cleaning teatable $TableToClean")
		//update teatable state
		forward tearoom -m updateState : updateState (updateTableState, $TableToClean, clean, ARG3)
		[# 
			WasCleaning = false
			TimeToClean = 2000L
			TableToClean = 0
			TimeCleanBegan = 0L
		#]
	}
	Goto doATask
	
	State checkForOtherPrioritizedTasks{
		//checking if there are other tasks that are prioritized (that would interrupt cleaning action)
		//if there is one, the waiter does that task
		//this way it won't return to the table to start cleaning and interrupt immediately after
	}
	Transition t0 whenTimeVar IdleTime -> cleanTeatablePhase1
				  whenMsg ready -> serveTeaToClientPhase1
				  whenMsg enter -> handleEnterPhase1
				  whenMsg wantToOrder -> handleOrderFromClientPhase1
				  whenMsg billPlease -> handlePaymentPhase1
				  
	State checkIfWasCleaning{
		//
	}
	Goto cleanTeatablePhase1 if [# WasCleaning == true #] else doATask
	

/****************************************************************************************************************************/

/******************************  WAITER TAKE CLIENT's ORDER  ****************************************************************/
	
	//Se prima ricevo un timeout e subito dopo un wantToOrder? Il Cliente non esiste più e quindi non devo gestire il messaggio
	State handleOrderFromClientPhase0{
		onMsg(wantToOrder : wantToOrder(TEATABLE_ID)){
			
			if [# WasCleaning == true #]{
				[# var TempTime = 0L #]
				memoCurrentTime TempTime
				[# TimeToClean = TimeToClean - (TempTime - TimeCleanBegan) #]
				println("waiter | interrupted cleaning to handle order request")
			}
			
			[# var Teatable = payloadArg(0).toInt() #]
			
			//Was wantToOrder sent after a timeout for that client was triggered?
			if [# stopHandlingClientAtTable.get(Teatable)!! == true #] { 
					println("waiter | ignoring wantToOrder message for table $Teatable since it's client timed-out...")
					[# stopCheck = true #]
					//ignore message
			}
			else{
					//Stop timer: stop counting for orderTime now!
					forward mastertimer -m stopTimer : stopTimer($payloadArg(0))
					println("waiter | client at teatable $Teatable want to order! Reaching table $Teatable...")
					
					[# stopCheck = false #]
					//NOTE: in this case there is no need to change stopHandlingClientAtTable value! Only timeout or billplease must change it
					//memorizing teatable_id for next phase
					[#
						DestTable = Teatable
					#]
			}
		}
	}
	Goto handleOrderFromClientPhase1 if [# stopCheck == false #] else checkIfWasCleaning
	
	State handleOrderFromClientPhase1 {
			[#
				var Dest =  "teatable" + DestTable
			#]
			updateResource[#"reachingPosition(teatable$DestTable)"#]
			request mover -m moveTo : moveTo($Dest)
	}
	Transition t0 whenReply done -> handleOrderFromClientPhase2
	
	State handleOrderFromClientPhase2 {
		onMsg(done : done(X,Y)){
			println("waiter | client can now order...")
			updateResource[# "atPosition(teatable$DestTable,${payloadArg(0)},${payloadArg(1)}):clientOrdering:$DestTable" #]
	//		emit orderPlease : orderPlease($DestTable)
		}
	}
	Transition t0 whenMsg tea -> handleOrderFromClientPhase3
	
	State handleOrderFromClientPhase3 {
		
		onMsg(tea : tea(TABLE,TEA)){
			println("waiter | client at teatable ${payloadArg(0)} ordered a ${payloadArg(1)}! Sending order to Barman...")
			forward barman -m  order : order($payloadArg(0), $payloadArg(1))
		}
		
	}
	Goto checkForOtherPrioritizedTasks if [# WasCleaning == true #] else doATask


/****************************************************************************************************************************/

/******************************  WAITER SERVE CLIENT  ***********************************************************************/	

//If a client time-out before 
	State serveTeaToClientPhase0 {
		onMsg(ready : ready(T,D)){
			
			if [# WasCleaning == true #]{
				[# var TempTime = 0L #]
				memoCurrentTime TempTime
				[# TimeToClean = TimeToClean - (TempTime - TimeCleanBegan) #]
				println("waiter | interrupted cleaning to serve")
			}
			
			[# var Teatable = payloadArg(0).toInt() #]
				
			//Se mi arriva contemporaneamente un wantToOrder e subito dopo un timeout...??? Ormai ho inviato la richiesta di fare un piatto...
			// devo ignorare il ready!
			
			//Was wantToOrder sent just before a timeout for that client was triggered? Then this client is no more inside the tearoom and waiter should ignore
			// this message
			if [# stopHandlingClientAtTable.get(Teatable)!! == true #] { 
					println("waiter | ignoring ready message for table $Teatable since it's client is no more inside the tearoom...")
					[# stopCheck = true #]
					//ignore message
			}
			else{
					[# stopCheck = false #]
					
					//memorizing some information for next phase
					[#
						DestTable = Teatable
						CurDrink = payloadArg(1)
					#]
			}
			
		}
	}
	Goto serveTeaToClientPhase1 if [# stopCheck == false #] else checkIfWasCleaning
	
	State serveTeaToClientPhase1 {
		updateResource[#"reachingPosition(servicedesk)"#]
		println("waiter | order for table $DestTable ready! Reaching service desk...")
		request mover -m moveTo : moveTo(servicedesk)
				
	}
	Transition t0 whenReply done -> servTeaToClientPhase2
	
	State servTeaToClientPhase2 {
		
		onMsg(done : done(X,Y)){
			updateResource[#"atPosition(servicedesk,${payloadArg(0)},${payloadArg(1)}):tea($CurDrink,$DestTable)"#]
			delay 500
			println("waiter | bringing tea to table $DestTable...")
			[#var Dest =  "teatable" + DestTable #]
			updateResource[#"reachingPosition(teatable$DestTable):servingTea($CurDrink)"#]	
			request mover -m moveTo : moveTo($Dest)
		
		}
			
	}
	Transition t0 whenReply done -> servTeaToClientPhase3
	
	State servTeaToClientPhase3 {
			onMsg(done : done(X,Y)){
				updateResource[#"atPosition(teatable$DestTable,${payloadArg(0)},${payloadArg(1)}):teaServed:$DestTable:$CurDrink"#]
				delay 1000
				//emit teaServed : teaServed($DestTable, $CurDrink )
				//start counting for consumingTime NOW
				//start timer to count until MaxStayTime
				println("Waiter resuming rimer for client...")
				forward mastertimer -m resumeTimer : resumeTimer($DestTable)
				
			}
	}		
	Goto checkForOtherPrioritizedTasks if [# WasCleaning == true #] else doATask

/****************************************************************************************************************************/	
		
/******************************  WAITER HANDLE PAYMENT  *********************************************************************/

	State handlePaymentPhase0 {
		onMsg(billPlease : billPlease(T)){
			
			if [# WasCleaning == true #]{
				[# var TempTime = 0L #]
				memoCurrentTime TempTime
				[# TimeToClean = TimeToClean - (TempTime - TimeCleanBegan) #]
				println("waiter | interrupted cleaning to handle payment request")
			}
			
			[# var Teatable = payloadArg(0).toInt() #]
			
			//Was billPlease sent after a timeout for that client was triggered?
			if [# stopHandlingClientAtTable.get(Teatable)!! == true #] { 
					println("waiter | ignoring billPlease message for table $Teatable since it's client timed-out...")
					[# stopCheck = true #]
					//ignore message
			}
			else{
					// stopping timer
					println("waiter | Client at table $Teatable is ready to pay. Ending timer for table $Teatable")
					forward mastertimer -m endTimer : endTimer($payloadArg(0))
		
					
					[# stopHandlingClientAtTable.put(Teatable, true) #] //remember past end for simultaneous timeout/billPlease message handling 
					[# stopCheck = false #]
					
					//memorizing teatable_id for next phase
					[#
						DestTable = Teatable
					#]
			}
		}
	}
	Goto handlePaymentPhase1 if [# stopCheck == false #] else checkIfWasCleaning
	
	State handlePaymentPhase1{
		
		// reaching table
		println("waiter | Reaching table ${payloadArg(0)} ...")
		updateResource[#"reachingPosition(teatable$DestTable)"#]
		[# var Dest = "teatable" + DestTable #]
		request mover -m moveTo : moveTo($Dest)
	}
	Transition t0 whenReply done -> handlePaymentPhase2
	
	State handlePaymentPhase2 {
		
		onMsg(done : done(X,Y)){
			println("waiter | Asking Client at table $DestTable to pay ...")
			updateResource[#"atPosition(teatable$DestTable,${payloadArg(0)},${payloadArg(1)}):clientPaying:$DestTable"#]
			delay 500
//			emit cardPlease : cardPlease($DestTable) 
			//get client_id from table_id
			request tearoom -m getRoomState : getRoomState(getClientFromTable, $DestTable)
		
		} 
	}
	Transition t0 whenReply state -> convoyClientToExitPhase1
	
	State convoyClientToExitPhase1 {
		onMsg(state : state(C)){
			println("waiter | Convoying Client ${payloadArg(0)} to exit door ...")
			[# ClientToConvoy = payloadArg(0)#]
			updateResource[#"convoyingClientToExitDoor($ClientToConvoy)"#]
			request mover -m moveTo : moveTo(exit)
		}
	}
	Transition t0 whenReply done -> convoyClientToExitPhase2
	
	State convoyClientToExitPhase2 {
		onMsg(done : done(X,Y)){
			println("waiter | saying goodbye to client $ClientToConvoy...")
			updateResource[#"atPosition(exit,${payloadArg(0)},${payloadArg(1)}):clientExiting:$ClientToConvoy"#]
//			emit exitPlease : exitPlease($ClientToConvoy)
			delay 500
			//updating teatable state
			forward tearoom -m updateState : updateState(updateTableState, $DestTable, dirty, ARG)
			//remember to clean the table
			forward waiter -m cleanTable : cleanTable($DestTable)
		}
	}
	Goto checkForOtherPrioritizedTasks if [# WasCleaning == true #] else doATask
/****************************************************************************************************************************/

/******************************  WAITER HANDLE SLOW CLIENT  *****************************************************************/	
	State handleTimeoutPhase0 {
		println("waiter | inside handleTimeoutPhase0")
		onMsg(timeout : timeout(T)){
			println("waiter | inside handleTimeoutPhase0 AND onMsg!")
			[# var Teatable = payloadArg(0).toInt() #]
			
			//if already receive a billPlease it's a case of simultaneously billPlease - timeout
			if [# stopHandlingClientAtTable.get(Teatable)!! == true #] { 
					println("waiter | ignoring timeout message for table $Teatable since it's client was already handled...")
					[# stopCheck = true #]
					//ignore message
			}
			else{
					println("waiter | Time exceeded for client at table $Teatable")
					println("waiter | reaching table $Teatable...")
					[# stopHandlingClientAtTable.put(Teatable, true) #] //remember past end for simultaneous timeout/billPlease/wantToOrder message handling 
					[# stopCheck = false #]
					
					[#
						DestTable = Teatable	
					#]
			}
		}
	}
	Goto handleTimeoutPhase1 if [#stopCheck == false#] else doATask
	
	State handleTimeoutPhase1 {
		
		updateResource[#"reachingPosition(teatable$DestTable)"#]
		[# var Dest = "teatable" + DestTable #]
		request mover -m moveTo : moveTo($Dest)
		
	}
	Transition t0 whenReply done -> handleTimeoutPhase2
	
	State handleTimeoutPhase2 {
		onMsg(done : done(X,Y)){
			updateResource[#"atPosition(teatable$DestTable,,${payloadArg(0)},${payloadArg(1)}):maxTimeExceeded:$DestTable"#]
			println("waiter | communicating to client at table ${payloadArg(0)} that he has to pay and leave...")
//			emit maxTimeExceeded : maxTimeExceeded($payloadArg(0), $Price)	
			delay 800			
			//get client_id from table_id
			request tearoom -m getRoomState : getRoomState(getClientFromTable, $DestTable)	
		}
			
	}
	Transition t0 whenReply state -> convoyClientToExitPhase1	
	
/****************************************************************************************************************************/	
	
}
	

