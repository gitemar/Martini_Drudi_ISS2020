System tearoom

mqttBroker "localhost" : 1883 eventTopic "unibo/polar" 	//mqtt.eclipse.org

// REQUEST can be: 
// 				getNumFreeTables
//				getFreeTable
// 				getTablesState		(NO! Per ora non serve! per questo non è ancora implementata)
// 				getTableFromClient	[ARG1 = client_id]
// 				getClientFromTable	[ARG1 = teatable_id]
//				getBusyAndDirtyTables
// UPDATE-REQUEST can be: 
// 				updateTableState  [ARG1 = teatable_id {1,2}, ARG2 = new_state {busy, dirty, clean}, if ARG2=busy => ARG3= client_id]
// 				updateBound		  [ARG1 = teatable_id {1,2}, ARG2 = client_id]	(ACCORPATA nel messaggio sopra)


// Interaction Waiter - Tearoom ========================================//
Request getRoomState : getRoomState(REQUEST, ARG1)						//
Reply state			 : state(STATE)
Reply numBusyAndDirty : numBusyAndDirty(BUSY,DIRTY)										//
Dispatch updateState : updateState (UPDATE_REQUEST, ARG1, ARG2, ARG3)	//
//======================================================================//

// Interaction Waiter - Barman  ==============================//
Dispatch order : order(TEATABLE_ID, TEA)					  //
Dispatch ready : ready(TEATABLE_ID,TEA)						  //
//============================================================//

// Interaction Waiter - Smartbell ============================//
Dispatch enter : enter(CLIENT_ID)						      //
//============================================================//

// Interaction Smartbell - Client  ===========================//
Request ring 			: ring(ARG)							  //
Reply sendClientID 		: sendClientID(CLIENT_ID)			  //
Dispatch enter 			: enter(CLIENT_ID)					  //
//============================================================//


Context ctxtearoom 			ip [host="localhost" port=8015]
Context ctxwaiter 		 	ip [host="127.0.0.1" port=8029]

ExternalQActor waiter context ctxwaiter

QActor tearoom context ctxtearoom {
	State s0 initial {
		
		discardMsg Off
		solve(consult("state.pl"))
		
		//solve(assert( teatable(1, clean) ))
		//solve(assert( teatable(2, clean) ))
		//solve(assert( bound(1, NO) ))
		//solve(assert( bound(2, NO) ))
		updateResource [# "teatable1(clean,no):teatable2(clean,no)"#]
	}
	Goto waitingForCommand
	
	State waitingForCommand {
		println("tearoom | waiting for command...")
	}
	Transition t0	whenRequest getRoomState -> handleRequest
					whenMsg updateState -> handleUpdate
	
	State handleRequest {
		// REQUEST: getFreeTable
		onMsg(getRoomState : getRoomState(getFreeTable, A)){
			[# var Table = 0 #]
		
			solve(teatable(T, clean))	
			ifSolved { [# Table = getCurSol("T").toString().toInt() #] 
				println("tearoom | table $Table is free")
			}
			replyTo getRoomState with state : state($Table)
			
		}
		
		// REQUEST: getNumFreeTables
		onMsg(getRoomState : getRoomState(getNumFreeTables, A)){
			[# var Num = 0 #]
		
			solve(numfreetables(N))	
			ifSolved { [# Num = getCurSol("N").toString().toInt() #] }
			println("tearoom | number of free table: $Num")
			replyTo getRoomState with state : state($Num)
			
		}
		
		//REQUEST: getBusyAndDirtyTables
		onMsg(getRoomState : getRoomState(getBusyAndDirtyTables, A)){
			println("tearoom | getting number of busy and dirty tables")
			[#
				var NumBusy = 0
				var NumDirty = 0
			#]
			solve(numbusytables(N))	
			ifSolved { [# NumBusy = getCurSol("N").toString().toInt() #] }
			println("tearoom | number of busy table: $NumBusy")
			solve(numdirtytables(N))	
			ifSolved { [# NumDirty = getCurSol("N").toString().toInt() #] }
			println("tearoom | number of dirty table: $NumDirty")
			replyTo getRoomState with numBusyAndDirty : numBusyAndDirty($NumBusy,$NumDirty)
		}
		
		// REQUEST: getTableFromClient
		onMsg(getRoomState : getRoomState(getTableFromClient, A)){
			
			[# 
				var Client_id = payloadArg(1)
				var ID = 0			  
			#]
			solve(bound(N,$Client_id))	
			ifSolved { [# ID = getCurSol("N").toString().toInt() #] 
				println("tearoom | client $Client_id is at table $ID")
			}
			replyTo getRoomState with state : state($ID)
			
		}
		
		// REQUEST: getClientFromTable
		onMsg(getRoomState : getRoomState(getClientFromTable, A)){
			println("tearoom | INSIDE GET_CLIENT_FORM_TABLE")
			[# 
				var C = "no"
				var ID = payloadArg(1).toInt()		  
			#]
			solve(bound($ID,N))	
			ifSolved { [# C = getCurSol("N").toString() #] }
			println("tearoom | table $ID is used by client $C")
			replyTo getRoomState with state : state($C)
			
		}
	}
	Goto waitingForCommand
	
	State handleUpdate {
		
		//println("tearoom | INSIDE HANDLE_UPDATE")
		printCurrentMessage
		
		// UPDATE-REQUEST: updateTableState CLEAN
		onMsg(updateState : updateState(updateTableState, ID, clean, A )){
			
			[# var T =  payloadArg(1).toInt() #]
			solve(setCleanTable($T))
			println("tearoom | update State: table $T is now clean")
			
			
			
		}
		
		// UPDATE-REQUEST: updateTableState DIRTY
		onMsg(updateState : updateState(updateTableState, ID, dirty, A )){
			
			[# 
				var T =  payloadArg(1).toInt() 
				var C = "no"
			#]
			solve(setDirtyTable($T))
			solve(assign($T,$C))
			println("tearoom | update State: table $T is now dirty")
			
		}
		
		// UPDATE-REQUEST: updateTableState BUSY
		onMsg(updateState : updateState(updateTableState, ID, busy, A )){
			
			[# 
				var T =  payloadArg(1).toInt() 
				var C = payloadArg(3)
			#]
			solve(setBusyTable($T))
			solve(assign($T,$C))
			println("tearoom | update State: table $T is now busy and assigned to client $C")
			
		}
	}
	Goto updateCoapResource 
	
	State updateCoapResource {
		[#
			var state1 : String = ""
			var state2 : String = ""
			var bound1 : String = ""
			var bound2 : String = ""
		#]
		solve(teatable(1,N))
		ifSolved { [# state1 = getCurSol("N").toString() #] }
		solve(teatable(2,N))
		ifSolved { [# state2 = getCurSol("N").toString() #] }
		solve(bound(1,N))
		ifSolved { [# bound1 = getCurSol("N").toString() #] }
		solve(bound(2,N))
		ifSolved { [# bound2 = getCurSol("N").toString() #] }
		[# var resource = "teatable1($state1,$bound1):teatable2($state2,$bound2)"#]
		updateResource[# "$resource" #]
	}
	Goto waitingForCommand
}

QActor barman context ctxtearoom {
	State s0 initial {
		discardMsg Off  //We need to prepare every client's order, thus we don't want to lose potential order 
						//while preparing previous one (while in state makeOrder)
	}
	Goto waitOrder
	
	State waitOrder{
		//waiting for orders from the waiter
		println("barman | waiting for orders from the waiter... ")
		
		updateResource [# "idle" #]
	}
	Transition t0 whenMsg order -> makeOrder
	
	State makeOrder {
		onMsg( order : order(D,T)){ 
			println("barman | making ${payloadArg(1)} for table ${payloadArg(0)} ")
			updateResource [# "preparing(${payloadArg(0)},${payloadArg(1)})" #]
			delay 5000	// MAKE the order received
			forward waiter -m ready : ready($payloadArg(0), $payloadArg(1))
			updateResource [# "idle" #]
		}
		
		
	}
	Goto waitOrder
}

QActor smartbell context ctxtearoom {
	

	State s0 initial{
		discardMsg Off  //We need to handle every client's request, thus we don't want to lose potential request 
						//while handling previous one (while in state handleRing)
	}
	Goto waitRing
	
	State waitRing{
		println("smartbell | waiting for clients to ring ... ")
	}
	Transition t0 whenRequest ring -> handleRing
	
	State handleRing{
		//verify client's temperature is under 37.5 degrees. If the temperature is ok the smartbell will create a client identifier
		// for the client that sent the request
		println("smartbell | a CLIENT rang the bell! ... ")
		[#
			var temperature = SmartbellUtils.getTemperature()	
			//var temperature = 36.0
			var CLIENT_ID = "NO"
			if (temperature < 37.5) {
				CLIENT_ID = SmartbellUtils.getClientID()
			}
		#]
		printCurrentMessage
		replyTo ring with sendClientID : sendClientID($CLIENT_ID)
		println("Scanning client... it's temperature is $temperature and ID is $CLIENT_ID")
		if [# temperature < 37.5 #] {
			println("Smartbell | notifyng waiter that a client want to enter")
			forward waiter -m enter : enter($CLIENT_ID)
		}
	}
	Goto waitRing
}