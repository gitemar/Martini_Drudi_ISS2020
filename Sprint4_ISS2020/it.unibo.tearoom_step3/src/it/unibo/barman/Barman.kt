/* Generated by AN DISI Unibo */ 
package it.unibo.barman

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Barman ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						discardMessages = false
					}
					 transition( edgeName="goto",targetState="waitOrder", cond=doswitch() )
				}	 
				state("waitOrder") { //this:State
					action { //it:State
						println("barman | waiting for orders from the waiter... ")
						updateResourceRep( "idle"  
						)
					}
					 transition(edgeName="t02",targetState="makeOrder",cond=whenDispatch("order"))
				}	 
				state("makeOrder") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("order(TEATABLE_ID,TEA)"), Term.createTerm("order(D,T)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("barman | making ${payloadArg(1)} for table ${payloadArg(0)} ")
								updateResourceRep( "preparing(${payloadArg(0)},${payloadArg(1)})"  
								)
								delay(5000) 
								forward("ready", "ready(${payloadArg(0)},${payloadArg(1)})" ,"waiter" ) 
								updateResourceRep( "idle"  
								)
						}
					}
					 transition( edgeName="goto",targetState="waitOrder", cond=doswitch() )
				}	 
			}
		}
}
