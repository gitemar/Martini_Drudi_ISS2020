/* Generated by AN DISI Unibo */ 
package it.unibo.client_mok

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Client_mok ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 var go = false
				var ID = ""
				var TABLE = -1
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("client | START SIMULATION...")
					}
					 transition( edgeName="goto",targetState="step1", cond=doswitch() )
				}	 
				state("step1") { //this:State
					action { //it:State
						println("client | STEP 1 : MOK want to enter the the safe tearoom")
						request("ring", "ring(ARG)" ,"smartbell" )  
					}
					 transition(edgeName="t04",targetState="step2",cond=whenReply("sendClientID"))
				}	 
				state("step2") { //this:State
					action { //it:State
						println("client | ma che? Ho ricevuto una risposta")
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("sendClientID(CLIENT_ID)"), Term.createTerm("sendClientID(C)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("$name in ${currentState.stateName} | $currentMsg")
								 ID = payloadArg(0) 
								if(  ID == "NO" 
								 ){println(" client | temperature not OK :-() ")
								println(" client | terminating... ")
								terminate(1)
								}
								else
								 {println("client | STEP 2.1 : Received clientID: ${payloadArg(0)}")
								 println("client | STEP 2.2 : waiting for my turn...")
								 }
						}
					}
					 transition(edgeName="t05",targetState="waitingToEnter",cond=whenEvent("wait"))
				}	 
				state("waitingToEnter") { //this:State
					action { //it:State
						go = false 
						if( checkMsgContent( Term.createTerm("wait(CLIENT_ID,MAX_TIME)"), Term.createTerm("wait(C,T)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("$name in ${currentState.stateName} | $currentMsg")
								 
												var time = payloadArg(1).toLong()
								println("client | STEP 3.1 : Received clientID: ${payloadArg(0)} and timeToWait $time")
								if(  ID == payloadArg(0)  
								 ){println("client | STEP 3.2.1 OK it's for me!")
								if(  time == 0L 
								 ){ go = true  
								println("client | STEP 3.2: YEEAH it's my turn :-)")
								}
								else
								 {println("client | STEP 3.2: BUT it's not my turn :-(((")
								 }
								}
						}
						if( go == false 
						 ){delay(500) 
						}
					}
					 transition( edgeName="goto",targetState="step4", cond=doswitchGuarded({go == true 
					}) )
					transition( edgeName="goto",targetState="waitingToEnter", cond=doswitchGuarded({! (go == true 
					) }) )
				}	 
				state("step4") { //this:State
					action { //it:State
						println("client | STEP 4 : robot is convoying MOK to a teatable! Waiting...")
					}
					 transition(edgeName="t06",targetState="waitingToSit",cond=whenEvent("sitPlease"))
				}	 
				state("waitingToSit") { //this:State
					action { //it:State
						go = false 
						if( checkMsgContent( Term.createTerm("sitPlease(CLIENT_ID,TEATABLE_ID)"), Term.createTerm("sitPlease(C,T)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("$name in ${currentState.stateName} | $currentMsg")
								println("client | STEP 5.1 : Received event with clientID: ${payloadArg(0)} and table ${payloadArg(1)}")
								if(  ID == payloadArg(0)  
								 ){println("client | STEP 5.2.1 OK MOK is sitted in table ${payloadArg(1)}")
								 
													go = true 
													TABLE = payloadArg(1).toInt()
								}
						}
					}
					 transition( edgeName="goto",targetState="step6", cond=doswitchGuarded({go == true 
					}) )
					transition( edgeName="goto",targetState="waitingToSit", cond=doswitchGuarded({! (go == true 
					) }) )
				}	 
				state("step6") { //this:State
					action { //it:State
						println("client | STEP 6.1 : MOK take same time to order... a lot of time :-)")
						delay(3000) 
						println("client | STEP 6.2 : MOK is ready to order")
						request("wantToOrder", "wantToOrder($TABLE)" ,"waiter" )  
					}
					 transition(edgeName="t07",targetState="step7",cond=whenReply("orderPlease"))
				}	 
				state("step7") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("orderPlease(ARG)"), Term.createTerm("orderPlease(A)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("$name in ${currentState.stateName} | $currentMsg")
								println("client | STEP 7.1 : MOK is ordering...")
								forward("tea", "tea($TABLE,peach)" ,"waiter" ) 
								println("client | STEP 7.2 : MOK is waiting for its order to arrive...")
						}
					}
					 transition(edgeName="t08",targetState="waitingForTea",cond=whenEvent("teaServed"))
				}	 
				state("waitingForTea") { //this:State
					action { //it:State
						go = false 
						if( checkMsgContent( Term.createTerm("teaServed(TEATABLE_ID,TEA)"), Term.createTerm("teaServed(T,TEA)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("$name in ${currentState.stateName} | $currentMsg")
								println("client | STEP 8.1 : Received event for table: ${payloadArg(0)} and tea ${payloadArg(1)}")
								if(  TABLE == payloadArg(0).toInt()  
								 ){println("client | STEP 8.2 OK MOK is now drinking it's tea")
								 
													go = true 
								}
						}
					}
					 transition( edgeName="goto",targetState="step9", cond=doswitchGuarded({go == true 
					}) )
					transition( edgeName="goto",targetState="waitingForTea", cond=doswitchGuarded({! (go == true 
					) }) )
				}	 
				state("step9") { //this:State
					action { //it:State
						println("client | STEP 9.1 : MOK take same time to order... a lot of time :-)")
						delay(5000) 
						println("client | STEP 9.2 : MOK ask for the bill...")
						request("billPlease", "billPlease($TABLE)" ,"waiter" )  
					}
					 transition(edgeName="t09",targetState="step10",cond=whenReply("cardPlease"))
				}	 
				state("step10") { //this:State
					action { //it:State
						println("client | STEP 10.1 : MOK payed the bill and will be convoyed to exit...")
					}
					 transition(edgeName="t010",targetState="waitingToExit",cond=whenEvent("exitPlease"))
				}	 
				state("waitingToExit") { //this:State
					action { //it:State
						go = false 
						if( checkMsgContent( Term.createTerm("exitPlease(CLIENT_ID)"), Term.createTerm("exitPlease(C)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("$name in ${currentState.stateName} | $currentMsg")
								println("client | STEP 11.1 : Received event for client: ${payloadArg(0)} ")
								if(  ID == payloadArg(0)  
								 ){println("client | STEP 11.2 OK MOK can leave")
								 
													go = true 
								}
						}
					}
					 transition( edgeName="goto",targetState="end", cond=doswitchGuarded({go == true 
					}) )
					transition( edgeName="goto",targetState="waitingToExit", cond=doswitchGuarded({! (go == true 
					) }) )
				}	 
				state("end") { //this:State
					action { //it:State
						println("client | SIMULATION END")
					}
				}	 
			}
		}
}
